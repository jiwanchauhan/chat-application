package chatting.application;

import javax.swing.*;
import javax.swing.border.*;
import java.awt.*;
import java.awt.event.*;
import java.text.*;
import java.util.*;
import java.net.*;
import java.io.*;
import java.util.concurrent.CopyOnWriteArrayList;

public class Server extends JFrame implements ActionListener {

    JTextField text;
    JPanel a1;
    static Box vertical = Box.createVerticalBox();
    static CopyOnWriteArrayList<ClientHandler> clientHandlers = new CopyOnWriteArrayList<>();

    public Server() {
        // GUI setup
        setUndecorated(true);
        setLayout(null);

        JPanel p1 = new JPanel();
        p1.setBackground(new Color(7, 94, 84));
        p1.setBounds(0, 0, 450, 70);
        p1.setLayout(null);
        add(p1);

        ImageIcon i1 = new ImageIcon(ClassLoader.getSystemResource("icons/3.png"));
        Image i2 = i1.getImage().getScaledInstance(25, 25, Image.SCALE_DEFAULT);
        JLabel back = new JLabel(new ImageIcon(i2));
        back.setBounds(5, 20, 25, 25);
        p1.add(back);
        back.addMouseListener(new MouseAdapter() {
            public void mouseClicked(MouseEvent ae) {
                System.exit(0);
            }
        });

        ImageIcon i4 = new ImageIcon(ClassLoader.getSystemResource("icons/1.png"));
        Image i5 = i4.getImage().getScaledInstance(50, 50, Image.SCALE_DEFAULT);
        JLabel profile = new JLabel(new ImageIcon(i5));
        profile.setBounds(40, 10, 50, 50);
        p1.add(profile);

        JLabel name = new JLabel("Jiwan");
        name.setBounds(110, 15, 100, 18);
        name.setForeground(Color.WHITE);
        name.setFont(new Font("SAN_SERIF", Font.BOLD, 18));
        p1.add(name);

        JLabel status = new JLabel("Active Now");
        status.setBounds(110, 35, 100, 18);
        status.setForeground(Color.WHITE);
        status.setFont(new Font("SAN_SERIF", Font.BOLD, 14));
        p1.add(status);

        a1 = new JPanel();
        a1.setBounds(5, 75, 440, 570);
        a1.setLayout(new BoxLayout(a1, BoxLayout.Y_AXIS));
        a1.add(vertical);
        add(a1);

        text = new JTextField();
        text.setBounds(5, 655, 310, 40);
        text.setFont(new Font("SAN_SERIF", Font.PLAIN, 16));
        add(text);

        JButton send = new JButton("Send");
        send.setBounds(320, 655, 123, 40);
        send.setBackground(new Color(7, 94, 84));
        send.setForeground(Color.WHITE);
        send.addActionListener(this);
        send.setFont(new Font("SAN_SERIF", Font.PLAIN, 16));
        add(send);

        setSize(450, 700);
        setLocation(200, 50);
        getContentPane().setBackground(Color.WHITE);
        setVisible(true);
    }

    public void actionPerformed(ActionEvent ae) {
        try {
            String out = text.getText();
            if (out.isEmpty()) return;

            JPanel p2 = formatLabel("Jiwan: " + out, true);
            JPanel right = new JPanel(new BorderLayout());
            right.add(p2, BorderLayout.LINE_END);
            vertical.add(right);
            vertical.add(Box.createVerticalStrut(15));
            text.setText("");
            revalidate();
            repaint();

            broadcast("Jiwan", out);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    public static JPanel formatLabel(String msg, boolean isServerMessage) {
        JPanel panel = new JPanel();
        panel.setLayout(new BoxLayout(panel, BoxLayout.Y_AXIS));
        JLabel output = new JLabel("<html><p style=\"width:150px\">" + msg + "</p></html>");
        output.setFont(new Font("Tahoma", Font.PLAIN, 16));
        output.setBackground(isServerMessage ? new Color(37, 211, 102) : new Color(240, 240, 240));
        output.setOpaque(true);
        output.setBorder(new EmptyBorder(15, 15, 15, 50));
        panel.add(output);

        Calendar cal = Calendar.getInstance();
        SimpleDateFormat sdf = new SimpleDateFormat("HH:mm");
        JLabel time = new JLabel(sdf.format(cal.getTime()));
        panel.add(time);

        return panel;
    }

    public void broadcast(String sender, String message) {
        String formattedMsg = "[" + sender + "]: " + message;
        for (ClientHandler client : clientHandlers) {
            client.sendMessage(formattedMsg);
        }
    }

    public static void main(String[] args) {
        new Server();

        try (ServerSocket skt = new ServerSocket(6001)) {
            System.out.println("Server listening on port 6001...");
            while (true) {
                Socket s = skt.accept();
                System.out.println("New client connected: " + s);
                ClientHandler handler = new ClientHandler(s);
                clientHandlers.add(handler);
                new Thread(handler).start();
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    static class ClientHandler implements Runnable {
        Socket socket;
        DataInputStream din;
        DataOutputStream dout;
        String username;

        public ClientHandler(Socket s) {
            try {
                socket = s;
                din = new DataInputStream(socket.getInputStream());
                dout = new DataOutputStream(socket.getOutputStream());

                dout.writeUTF("Enter your username:");
                username = din.readUTF();
                System.out.println("User connected: " + username);
            } catch (Exception e) {
                e.printStackTrace();
            }
        }

        public void run() {
            try {
                String msgIn;
                while ((msgIn = din.readUTF()) != null) {
                    String formattedMsg = "[" + username + "]: " + msgIn;
                    System.out.println("Received: " + formattedMsg);

                    SwingUtilities.invokeLater(() -> {
                        JPanel msgPanel = formatLabel(formattedMsg, false);
                        JPanel left = new JPanel(new BorderLayout());
                        left.add(msgPanel, BorderLayout.LINE_START);
                        vertical.add(left);
                        vertical.add(Box.createVerticalStrut(15));
                        vertical.revalidate();
                        vertical.repaint();
                    });

                    for (ClientHandler client : clientHandlers) {
                        client.sendMessage(formattedMsg);
                    }
                }
            } catch (IOException e) {
                System.out.println("Connection closed for user: " + username);
            } finally {
                try {
                    socket.close();
                    din.close();
                    dout.close();
                } catch (IOException ex) {
                    ex.printStackTrace();
                }
                clientHandlers.remove(this);
            }
        }

        public void sendMessage(String message) {
            try {
                dout.writeUTF(message);
                dout.flush();
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
    }
}
